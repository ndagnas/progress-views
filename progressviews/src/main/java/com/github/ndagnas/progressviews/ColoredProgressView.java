/*/***************************************************************************************************************************************************
 * Copyright (C) 2020 Nicolas Dagnas
 *
 * Object inspired by Tim Qi, in project: https://github.com/timqi/SectorProgressView
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *    Created by Nicolas Dagnas on 26-05-2020, updated on 28-05-2020.
 *
 ****************************************************************************************************************************************************/

//----------------------------------------------------------------------------------------------------------------------------------------------------
// Package definition
//----------------------------------------------------------------------------------------------------------------------------------------------------
package com.github.ndagnas.progressviews;
//----------------------------------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------------------------------
// Imports
//----------------------------------------------------------------------------------------------------------------------------------------------------
import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.View;
import android.view.animation.LinearInterpolator;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import androidx.annotation.Keep;
import androidx.annotation.NonNull;
//----------------------------------------------------------------------------------------------------------------------------------------------------

/*-***********************************************************************************************************************************************//**
 * Defines a colored circle progress bar.
 ****************************************************************************************************************************************************/
@SuppressWarnings ( { "unused" } )
public class ColoredProgressView extends View
    {
    //------------------------------------------------------------------------------------------------------------------------------------------------
    // Constants
    //------------------------------------------------------------------------------------------------------------------------------------------------
    private static java.util.Locale DEF_LOCAL = java.util.Locale.getDefault ();
    //------------------------------------------------------------------------------------------------------------------------------------------------

    //------------------------------------------------------------------------------------------------------------------------------------------------
    // Attributes
    //------------------------------------------------------------------------------------------------------------------------------------------------
    private AnimatorSet    mAnimator;
    private LinearGradient mBarShader;
    private RectF          mOvalBounds;
    private LinearGradient mTextShader;
    private Paint          mViewPaint;
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    private int            mBackgroundColor = 0xFFE1E1E1;
    private int            mBarColorStart   = 0xffffE400;
    private int            mBarColorEnd     = 0xffff4800;
    private float          mMaxValue        = 100;
    private int            mBarWidth        = 20;
    private float          mStartAngle      = 0;
    private CharSequence   mText;
    private RectF          mTextBounds;
    private int            mTextColor       = 0xFFFFE400;
    private TextMode       mTextMode        = TextMode.PERCENT;
    private TextPaint      mTextPaint;
    private float          mTextSize        = 30;
    private float          mValue           = 0;
    //------------------------------------------------------------------------------------------------------------------------------------------------

    /*-*******************************************************************************************************************************************//**
     * The constructor for the CircleView.
     *
     * @param context The context.
     * @param attrs   The attributes.
     ************************************************************************************************************************************************/
    public ColoredProgressView ( Context context, AttributeSet attrs )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        super ( context, attrs );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Attributes
        //--------------------------------------------------------------------------------------------------------------------------------------------
        TypedArray attrSelf = context.obtainStyledAttributes ( attrs, R.styleable.ColoredProgressView, 0,0 );

        try
            {
            this.parseAttributes ( attrSelf );
            }
        finally { attrSelf.recycle (); }
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // View Paint
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mViewPaint = new Paint ();

        this.mViewPaint.setAntiAlias   ( true               );
        this.mViewPaint.setStyle       ( Paint.Style.STROKE );
        this.mViewPaint.setStrokeWidth ( this.mBarWidth     );
        this.mViewPaint.setStrokeCap   ( Paint.Cap.ROUND    );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Text Paint
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mTextPaint = new TextPaint ();

        this.mTextPaint.setSubpixelText ( true               );
        this.mTextPaint.setLinearText   ( true               );
        this.mTextPaint.setTypeface     ( Typeface.MONOSPACE );
        this.mTextPaint.setColor        ( this.mTextColor    );
        this.mTextPaint.setStyle        ( Paint.Style.FILL   );
        this.mTextPaint.setAntiAlias    ( true               );
        this.mTextPaint.setTextAlign    ( Paint.Align.CENTER );
        this.mTextPaint.setTextSize     ( this.mTextSize     );
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /* ---- Privates Methods ---- */

    /*-*******************************************************************************************************************************************//**
     * Parse the attributes passed to the view from the XML.
     *
     * @param attrSelf the attributes to parse.
     ************************************************************************************************************************************************/
    private void parseAttributes ( @NonNull TypedArray attrSelf )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mBackgroundColor
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_backgroundColor ) )
            this.mBackgroundColor = attrSelf.getColor ( R.styleable.ColoredProgressView_backgroundColor, 0xFFE1E1E1 );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mBarColorStart
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_barColorStart ) )
            this.mBarColorStart = attrSelf.getColor ( R.styleable.ColoredProgressView_barColorStart, 0xffffE400 );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mBarColorEnd
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_barColorEnd ) )
            this.mBarColorEnd = attrSelf.getColor ( R.styleable.ColoredProgressView_barColorEnd, 0xffff4800 );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mBarWidth
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_barWidth ) )
            this.mBarWidth = attrSelf.getDimensionPixelSize ( R.styleable.ColoredProgressView_barWidth, 20 );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mMaxValue
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_maxValue ) )
            this.mMaxValue = attrSelf.getFloat ( R.styleable.ColoredProgressView_maxValue, 100.0F );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mStartAngle
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_startAngle ) )
            this.mStartAngle = attrSelf.getFloat ( R.styleable.ColoredProgressView_startAngle, 0.0F );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mText
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_text ) )
            this.mText = attrSelf.getString ( R.styleable.ColoredProgressView_text );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mTextColor
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_textColor ) )
            this.mTextColor = attrSelf.getColor ( R.styleable.ColoredProgressView_textColor, 0xFFFFE400 );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mTextMode
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_textMode ) )
            this.mTextMode = TextMode.values()[attrSelf.getInt ( R.styleable.ColoredProgressView_textMode, 0 )];
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mTextSize
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_textSize ) )
            this.mTextSize = attrSelf.getDimension ( R.styleable.ColoredProgressView_textSize, 10.0F );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // mValue
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( attrSelf.hasValue ( R.styleable.ColoredProgressView_value ) )
            this.mValue = attrSelf.getFloat ( R.styleable.ColoredProgressView_value, 0.0F );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Values check
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( this.mMaxValue <= 0.0F ) this.mMaxValue = 100.0F;

        if ( this.mValue > this.mMaxValue ) this.mValue = this.mMaxValue;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Refresh layout.
     ************************************************************************************************************************************************/
    private void refreshLayout () { this.invalidate (); this.requestLayout (); }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Update bounds.
     ************************************************************************************************************************************************/
    private void updateBounds ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        int viewWidth            = this.getMeasuredWidth  ();
        int viewHeight           = this.getMeasuredHeight ();
        int paddingTop           = this.getPaddingTop  ();
        int paddingLeft          = this.getPaddingLeft ();
        int paddingRight         = this.getPaddingRight  ();
        int paddingBottom        = this.getPaddingBottom ();
        int widthWithoutPadding  = viewWidth  - ( paddingLeft + paddingRight  );
        int heightWithoutPadding = viewHeight - ( paddingTop  + paddingBottom );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Oval bounds
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mOvalBounds = new RectF ( paddingLeft                        + this.mBarWidth,
                                       paddingTop                         + this.mBarWidth,
                                       paddingLeft + widthWithoutPadding  - this.mBarWidth,
                                       paddingTop  + heightWithoutPadding - this.mBarWidth);
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Text bounds
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mTextBounds = new RectF ( 0, 0, widthWithoutPadding, heightWithoutPadding );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.updateShaders ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Update shaders.
     ************************************************************************************************************************************************/
    private void updateShaders ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mBarShader = new LinearGradient ( this.mOvalBounds.left, this.mOvalBounds.top, this.mOvalBounds.left, this.mOvalBounds.bottom,
                this.mBarColorEnd, this.mBarColorStart, Shader.TileMode.MIRROR );

        this.mTextShader = new LinearGradient ( this.mTextBounds.left, this.mTextBounds.top, this.mTextBounds.left, this.mTextBounds.bottom,
                this.mBarColorEnd, this.mBarColorStart, Shader.TileMode.MIRROR );
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /* ---- Derived Methods ---- */

    /*-*******************************************************************************************************************************************//**
     * Called on view drawing.
     *
     * @param canvas The canvas.
     ************************************************************************************************************************************************/
    @Override protected void onDraw ( Canvas canvas )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        super.onDraw ( canvas );

        float percent = ( this.mMaxValue > 0.0F && this.mMaxValue > this.mValue ) ? this.mValue * 100.0F / this.mMaxValue : this.mValue;
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Bar
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mViewPaint.setShader ( null                  );
        this.mViewPaint.setColor  ( this.mBackgroundColor );

        canvas.drawArc ( this.mOvalBounds, 0, 360, false, this.mViewPaint );

        this.mViewPaint.setShader ( this.mBarShader );

        canvas.drawArc ( this.mOvalBounds, mStartAngle - 90.0F, percent * 3.6f, false, this.mViewPaint );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Text
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( ! TextUtils.isEmpty ( this.mText ) || this.mTextMode != TextMode.TEXT )
            {
            //----------------------------------------------------------------------------------------------------------------------------------------
            CharSequence text;
            //----------------------------------------------------------------------------------------------------------------------------------------

            //----------------------------------------------------------------------------------------------------------------------------------------
            if ( this.mTextMode == TextMode.PERCENT )
                {
                text = String.format ( DEF_LOCAL, "%d%%", (int)percent );
                }
            else if ( this.mTextMode == TextMode.VALUE )
                {
                text = "" + (int)this.mValue;
                }
            else { text = this.mText; }
            //----------------------------------------------------------------------------------------------------------------------------------------

            //----------------------------------------------------------------------------------------------------------------------------------------
            text = TextUtils.ellipsize ( text, this.mTextPaint, this.mTextBounds.width () - ( this.mBarWidth * 3.0F ), TextUtils.TruncateAt.END );

            float textHeight = this.mTextPaint.descent () - this.mTextPaint.ascent ();
            float textOffset = ( textHeight / 2 ) - this.mTextPaint.descent ();

            this.mTextPaint.setShader ( ( this.mTextColor <= 0 ) ? this.mTextShader : null );

            canvas.drawText (text.toString (), this.mTextBounds.centerX (), this.mTextBounds.centerY () + textOffset, mTextPaint );
            //----------------------------------------------------------------------------------------------------------------------------------------
            }
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Called on view size changed.
     *
     * @param w new width.
     * @param h new height.
     * @param oldWidth old width.
     * @param oldHeight old height.
     ************************************************************************************************************************************************/
    @Override protected void onSizeChanged ( int w, int h, int oldWidth, int oldHeight )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        super.onSizeChanged ( w, h, oldWidth, oldHeight );

        this.updateBounds ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /* ---- Public Methods ---- */

    /*-*******************************************************************************************************************************************//**
     * Puts the view in spin mode.
     *
     * @param value value of bar length.
     * @param animationStarted called on animation started.
     ************************************************************************************************************************************************/
    public void setValue ( float value, final Runnable animationStarted )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Current spinning ?
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.stopSpinning ();
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Unitial duration to reach the specified value
        //--------------------------------------------------------------------------------------------------------------------------------------------
        long duration = (long)( this.mValue * 800 / this.mMaxValue );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Value animation
        //--------------------------------------------------------------------------------------------------------------------------------------------
        ObjectAnimator valueAnimator = ObjectAnimator.ofFloat ( this, "value", this.mValue, value );

        valueAnimator.setInterpolator ( new LinearInterpolator () );
        valueAnimator.setDuration     ( duration                  );

        if ( animationStarted != null )
            {
            valueAnimator.addListener ( new Animator.AnimatorListener ()
                {
				@Override public void onAnimationStart ( Animator animator ) {}
				@Override public void onAnimationEnd   ( Animator animator )
					{
					animationStarted.run ();
					}
				@Override public void onAnimationCancel ( Animator animator ) {}
				@Override public void onAnimationRepeat ( Animator animator ) {}
                } );
            }
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Animation
        //--------------------------------------------------------------------------------------------------------------------------------------------
        valueAnimator.start ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Puts the view in spin mode.
     ************************************************************************************************************************************************/
    public void spin ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.spin ( 50.0F );
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Puts the view in spin mode.
     *
     * @param value value of bar length.
     ************************************************************************************************************************************************/
    public void spin ( float value )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.spin ( 50.0F, null );
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Puts the view in spin mode.
     *
     * @param value value of bar length.
     * @param animationStarted called on animation started.
     ************************************************************************************************************************************************/
    public void spin ( float value, final Runnable animationStarted )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Current spinning ?
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.stopSpinning ();
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Unitial duration to reach the specified value
        //--------------------------------------------------------------------------------------------------------------------------------------------
        long startDuration = (long)( this.mValue * 800 / this.mMaxValue );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Value animation
        //--------------------------------------------------------------------------------------------------------------------------------------------
        ObjectAnimator valueAnimator = ObjectAnimator.ofFloat ( this, "value", this.mValue, value );

        valueAnimator.setInterpolator ( new LinearInterpolator () );
        valueAnimator.setDuration     ( startDuration             );

        if ( animationStarted != null )
            {
            valueAnimator.addListener ( new Animator.AnimatorListener ()
                {
				@Override public void onAnimationStart ( Animator animator ) {}
				@Override public void onAnimationEnd   ( Animator animator )
					{
					animationStarted.run ();
					}
				@Override public void onAnimationCancel ( Animator animator ) {}
				@Override public void onAnimationRepeat ( Animator animator ) {}
                } );
            }
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Angle animation
        //--------------------------------------------------------------------------------------------------------------------------------------------
        ObjectAnimator angleAnimator = ObjectAnimator.ofFloat ( this, "startAngle", this.mStartAngle, this.mStartAngle + 360 );

        angleAnimator.setStartDelay   ( startDuration             );
        angleAnimator.setInterpolator ( new LinearInterpolator () );
        angleAnimator.setDuration     ( 800                       );
        angleAnimator.setRepeatCount  ( ValueAnimator.INFINITE    );
        angleAnimator.setRepeatMode   ( ValueAnimator.RESTART     );
        //--------------------------------------------------------------------------------------------------------------------------------------------

        //--------------------------------------------------------------------------------------------------------------------------------------------
        // Animation
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mAnimator = new AnimatorSet ();

        this.mAnimator.playTogether ( valueAnimator, angleAnimator );

        this.mAnimator.start ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Turn off spinning mode.
     ************************************************************************************************************************************************/
    public void stopSpinning ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        if ( this.mAnimator != null ) { this.mAnimator.cancel (); this.mAnimator = null; }
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /* ---- Public Properties ---- */

    /*-*******************************************************************************************************************************************//**
     * Get bar color start.
     *
     * @return bar color start
     ************************************************************************************************************************************************/
    public int getBarColorStart ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mBarColorStart;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get bar color end.
     *
     * @return bar color end
     ************************************************************************************************************************************************/
    public int getBarColorEnd ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mBarColorEnd;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get bar width.
     *
     * @return an integer contains bar width
     ************************************************************************************************************************************************/
    public float getBarWidth ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mBarWidth;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get start angle.
     *
     * @return an integer contains start angle
     ************************************************************************************************************************************************/
    public float getStartAngle ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mStartAngle;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get text.
     *
     * @return a string contains text
     ************************************************************************************************************************************************/
    public CharSequence getText ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return mText;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get text color.
     *
     * @return a color of text
     ************************************************************************************************************************************************/
    public int getTextColor ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mTextColor;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get text mode. Default is 'Text'.
     *
     * <p>TEXT, Percent, Value are the three selection types.
     *
     * @return current text mode
     ************************************************************************************************************************************************/
    public TextMode getTextMode ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mTextMode;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get size of text.
     *
     * @return current size of text
     ************************************************************************************************************************************************/
    public float getTextSize ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mTextSize;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Get the value of the circle view without an animation.
     *
     * @return current value
     ************************************************************************************************************************************************/
    public float getValue ()
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        return this.mValue;
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set bar color start.
     *
     * @param barColorStart new bar color start
     ************************************************************************************************************************************************/
    public void setBarColorStart ( int barColorStart )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mBarColorStart = barColorStart;

        this.updateShaders ();

        this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set bar color end.
     *
     * @param barColorEnd new bar color end
     ************************************************************************************************************************************************/
    public void setBarColorEnd ( int barColorEnd )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mBarColorEnd = barColorEnd;

        this.updateShaders ();

        this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set bar width.
     *
     * @param barWidth new bar width
     ************************************************************************************************************************************************/
    public void setBarWidth ( int barWidth )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mBarWidth = barWidth;

        this.mViewPaint.setStrokeWidth ( barWidth );

        this.updateBounds ();

        this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set start angle.
     *
     * @param startAngle new start angle
     ************************************************************************************************************************************************/
    @Keep
    public void setStartAngle ( float startAngle )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mStartAngle = startAngle; this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set text.
     *
     * @param text new text
     ************************************************************************************************************************************************/
    public void setText ( CharSequence text )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mText = text; this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set text color.
     *
     * @param textColor new color of text
     ************************************************************************************************************************************************/
    public void setTextColor ( int textColor )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mTextColor = textColor;

        this.mTextPaint.setColor ( ( this.mTextColor <= 0 ) ? 0xFFFFE400 : textColor );

        this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set text mode.
     *
     * <p>TEXT, Percent, Value are the three selection types.
     *
     * @param textMode new text mode
     ************************************************************************************************************************************************/
    public void setTextMode ( TextMode textMode )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
        this.mTextMode = textMode; this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set size of text.
     *
     * @param dimenId resource id of size
     ************************************************************************************************************************************************/
    public void setTextSize ( int dimenId )
		{
        //--------------------------------------------------------------------------------------------------------------------------------------------
		this.setTextSize ( TypedValue.COMPLEX_UNIT_PX, this.getResources ().getDimensionPixelSize ( dimenId ) );
        //--------------------------------------------------------------------------------------------------------------------------------------------
		}
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set size of text.
     *
     * @param textSize new text size
     ************************************************************************************************************************************************/
    public void setTextSize ( float textSize )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
		this.setTextSize ( TypedValue.COMPLEX_UNIT_PX, textSize );
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set size of text.
     *
     * @param unit size unit
     * @param size new size
     ************************************************************************************************************************************************/
    public void setTextSize ( int unit, float size )
        {
        //--------------------------------------------------------------------------------------------------------------------------------------------
		float textSize = TypedValue.applyDimension ( unit, size, this.getResources ().getDisplayMetrics () );

        this.mTextSize = (int)textSize;

        this.mTextPaint.setTextSize ( textSize );

        this.updateBounds ();

        this.refreshLayout ();
        //--------------------------------------------------------------------------------------------------------------------------------------------
        }
    //************************************************************************************************************************************************

    /*-*******************************************************************************************************************************************//**
     * Set the value of the circle view.
     *
     * @param value the new value
     ************************************************************************************************************************************************/
    @Keep
    public void setValue ( float value ) { this.mValue = value; this.refreshLayout (); }
    //************************************************************************************************************************************************
    }
//****************************************************************************************************************************************************

//****************************************************************************************************************************************************
// END OF FILE
//****************************************************************************************************************************************************
